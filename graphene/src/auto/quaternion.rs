// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use gobject_sys;
use graphene_sys;
use std::mem;
use Euler;
use Matrix;
use Vec3;
use Vec4;

glib_wrapper! {
    #[derive(Debug, PartialOrd, Ord, Hash)]
    pub struct Quaternion(Boxed<graphene_sys::graphene_quaternion_t>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(graphene_sys::graphene_quaternion_get_type(), ptr as *mut _) as *mut graphene_sys::graphene_quaternion_t,
        free => |ptr| gobject_sys::g_boxed_free(graphene_sys::graphene_quaternion_get_type(), ptr as *mut _),
        init => |_ptr| (),
        clear => |_ptr| (),
        get_type => || graphene_sys::graphene_quaternion_get_type(),
    }
}

impl Quaternion {
    pub fn dot(&self, b: &Quaternion) -> f32 {
        unsafe { graphene_sys::graphene_quaternion_dot(self.to_glib_none().0, b.to_glib_none().0) }
    }

    fn equal(&self, b: &Quaternion) -> bool {
        unsafe {
            from_glib(graphene_sys::graphene_quaternion_equal(
                self.to_glib_none().0,
                b.to_glib_none().0,
            ))
        }
    }

    pub fn init(&mut self, x: f32, y: f32, z: f32, w: f32) {
        unsafe {
            graphene_sys::graphene_quaternion_init(self.to_glib_none_mut().0, x, y, z, w);
        }
    }

    pub fn init_from_angle_vec3(&mut self, angle: f32, axis: &Vec3) {
        unsafe {
            graphene_sys::graphene_quaternion_init_from_angle_vec3(
                self.to_glib_none_mut().0,
                angle,
                axis.to_glib_none().0,
            );
        }
    }

    pub fn init_from_angles(&mut self, deg_x: f32, deg_y: f32, deg_z: f32) {
        unsafe {
            graphene_sys::graphene_quaternion_init_from_angles(
                self.to_glib_none_mut().0,
                deg_x,
                deg_y,
                deg_z,
            );
        }
    }

    pub fn init_from_euler(&mut self, e: &Euler) {
        unsafe {
            graphene_sys::graphene_quaternion_init_from_euler(
                self.to_glib_none_mut().0,
                e.to_glib_none().0,
            );
        }
    }

    pub fn init_from_matrix(&mut self, m: &Matrix) {
        unsafe {
            graphene_sys::graphene_quaternion_init_from_matrix(
                self.to_glib_none_mut().0,
                m.to_glib_none().0,
            );
        }
    }

    pub fn init_from_quaternion(&mut self, src: &Quaternion) {
        unsafe {
            graphene_sys::graphene_quaternion_init_from_quaternion(
                self.to_glib_none_mut().0,
                src.to_glib_none().0,
            );
        }
    }

    pub fn init_from_radians(&mut self, rad_x: f32, rad_y: f32, rad_z: f32) {
        unsafe {
            graphene_sys::graphene_quaternion_init_from_radians(
                self.to_glib_none_mut().0,
                rad_x,
                rad_y,
                rad_z,
            );
        }
    }

    pub fn init_from_vec4(&mut self, src: &Vec4) {
        unsafe {
            graphene_sys::graphene_quaternion_init_from_vec4(
                self.to_glib_none_mut().0,
                src.to_glib_none().0,
            );
        }
    }

    pub fn init_identity(&mut self) {
        unsafe {
            graphene_sys::graphene_quaternion_init_identity(self.to_glib_none_mut().0);
        }
    }

    pub fn invert(&self) -> Quaternion {
        unsafe {
            let mut res = Quaternion::uninitialized();
            graphene_sys::graphene_quaternion_invert(
                self.to_glib_none().0,
                res.to_glib_none_mut().0,
            );
            res
        }
    }

    pub fn normalize(&self) -> Quaternion {
        unsafe {
            let mut res = Quaternion::uninitialized();
            graphene_sys::graphene_quaternion_normalize(
                self.to_glib_none().0,
                res.to_glib_none_mut().0,
            );
            res
        }
    }

    pub fn slerp(&self, b: &Quaternion, factor: f32) -> Quaternion {
        unsafe {
            let mut res = Quaternion::uninitialized();
            graphene_sys::graphene_quaternion_slerp(
                self.to_glib_none().0,
                b.to_glib_none().0,
                factor,
                res.to_glib_none_mut().0,
            );
            res
        }
    }

    pub fn to_angle_vec3(&self) -> (f32, Vec3) {
        unsafe {
            let mut angle = mem::MaybeUninit::uninit();
            let mut axis = Vec3::uninitialized();
            graphene_sys::graphene_quaternion_to_angle_vec3(
                self.to_glib_none().0,
                angle.as_mut_ptr(),
                axis.to_glib_none_mut().0,
            );
            let angle = angle.assume_init();
            (angle, axis)
        }
    }

    pub fn to_angles(&self) -> (f32, f32, f32) {
        unsafe {
            let mut deg_x = mem::MaybeUninit::uninit();
            let mut deg_y = mem::MaybeUninit::uninit();
            let mut deg_z = mem::MaybeUninit::uninit();
            graphene_sys::graphene_quaternion_to_angles(
                self.to_glib_none().0,
                deg_x.as_mut_ptr(),
                deg_y.as_mut_ptr(),
                deg_z.as_mut_ptr(),
            );
            let deg_x = deg_x.assume_init();
            let deg_y = deg_y.assume_init();
            let deg_z = deg_z.assume_init();
            (deg_x, deg_y, deg_z)
        }
    }

    pub fn to_matrix(&self) -> Matrix {
        unsafe {
            let mut m = Matrix::uninitialized();
            graphene_sys::graphene_quaternion_to_matrix(
                self.to_glib_none().0,
                m.to_glib_none_mut().0,
            );
            m
        }
    }

    pub fn to_radians(&self) -> (f32, f32, f32) {
        unsafe {
            let mut rad_x = mem::MaybeUninit::uninit();
            let mut rad_y = mem::MaybeUninit::uninit();
            let mut rad_z = mem::MaybeUninit::uninit();
            graphene_sys::graphene_quaternion_to_radians(
                self.to_glib_none().0,
                rad_x.as_mut_ptr(),
                rad_y.as_mut_ptr(),
                rad_z.as_mut_ptr(),
            );
            let rad_x = rad_x.assume_init();
            let rad_y = rad_y.assume_init();
            let rad_z = rad_z.assume_init();
            (rad_x, rad_y, rad_z)
        }
    }

    pub fn to_vec4(&self) -> Vec4 {
        unsafe {
            let mut res = Vec4::uninitialized();
            graphene_sys::graphene_quaternion_to_vec4(
                self.to_glib_none().0,
                res.to_glib_none_mut().0,
            );
            res
        }
    }
}

impl PartialEq for Quaternion {
    #[inline]
    fn eq(&self, other: &Self) -> bool {
        self.equal(other)
    }
}

impl Eq for Quaternion {}
