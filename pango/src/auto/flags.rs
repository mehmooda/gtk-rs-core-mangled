// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use glib::value::FromValue;
use glib::value::FromValueOptional;
use glib::value::SetValue;
use glib::value::Value;
use glib::StaticType;
use glib::Type;
use gobject_sys;
use pango_sys;

bitflags! {
    pub struct FontMask: u32 {
        const FAMILY = 1;
        const STYLE = 2;
        const VARIANT = 4;
        const WEIGHT = 8;
        const STRETCH = 16;
        const SIZE = 32;
        const GRAVITY = 64;
        const VARIATIONS = 128;
    }
}

#[doc(hidden)]
impl ToGlib for FontMask {
    type GlibType = pango_sys::PangoFontMask;

    fn to_glib(&self) -> pango_sys::PangoFontMask {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<pango_sys::PangoFontMask> for FontMask {
    fn from_glib(value: pango_sys::PangoFontMask) -> FontMask {
        FontMask::from_bits_truncate(value)
    }
}

impl StaticType for FontMask {
    fn static_type() -> Type {
        unsafe { from_glib(pango_sys::pango_font_mask_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for FontMask {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for FontMask {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for FontMask {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
bitflags! {
    pub struct ShapeFlags: u32 {
        const NONE = 0;
        const ROUND_POSITIONS = 1;
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
#[doc(hidden)]
impl ToGlib for ShapeFlags {
    type GlibType = pango_sys::PangoShapeFlags;

    fn to_glib(&self) -> pango_sys::PangoShapeFlags {
        self.bits()
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
#[doc(hidden)]
impl FromGlib<pango_sys::PangoShapeFlags> for ShapeFlags {
    fn from_glib(value: pango_sys::PangoShapeFlags) -> ShapeFlags {
        ShapeFlags::from_bits_truncate(value)
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
impl StaticType for ShapeFlags {
    fn static_type() -> Type {
        unsafe { from_glib(pango_sys::pango_shape_flags_get_type()) }
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
impl<'a> FromValueOptional<'a> for ShapeFlags {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
impl<'a> FromValue<'a> for ShapeFlags {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
impl SetValue for ShapeFlags {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
bitflags! {
    pub struct ShowFlags: u32 {
        const NONE = 0;
        const SPACES = 1;
        const LINE_BREAKS = 2;
        const IGNORABLES = 4;
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
#[doc(hidden)]
impl ToGlib for ShowFlags {
    type GlibType = pango_sys::PangoShowFlags;

    fn to_glib(&self) -> pango_sys::PangoShowFlags {
        self.bits()
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
#[doc(hidden)]
impl FromGlib<pango_sys::PangoShowFlags> for ShowFlags {
    fn from_glib(value: pango_sys::PangoShowFlags) -> ShowFlags {
        ShowFlags::from_bits_truncate(value)
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
impl StaticType for ShowFlags {
    fn static_type() -> Type {
        unsafe { from_glib(pango_sys::pango_show_flags_get_type()) }
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
impl<'a> FromValueOptional<'a> for ShowFlags {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
impl<'a> FromValue<'a> for ShowFlags {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_sys::g_value_get_flags(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v1_44", feature = "dox"))]
impl SetValue for ShowFlags {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_sys::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}
